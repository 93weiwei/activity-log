name: Build → Unit → Integration → Staging → Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_fail:
        description: "Force tests to fail (for demo/screenshots)"
        required: false
        default: "false"

permissions:
  contents: write
  id-token: write
  deployments: write

env:
  ARTIFACT_NAME: build-artifact
  NODE_VERSION: '20'
  TEST_ENV: staging

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 👉 不再執行 npm run build；直接放一個 mock 產物
      - name: Mock Build (create dist)
        run: |
          rm -rf dist
          mkdir -p dist
          echo '<h1>Hello CI</h1>' > dist/index.html
          ls -la dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/**



  test-unit:
    runs-on: ubuntu-latest
    needs: build
    steps:
    # ⬇️ 一定要先 checkout，腳本和 package.json 才會在工作目錄
    - uses: actions/checkout@v4

    # （可留著以符合作業「下載 artifact」的要求）
    - uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Optional fail (for screenshots)
      if: ${{ github.event.inputs.force_fail == 'true' }}
      run: echo "FORCE_FAIL=1" >> $GITHUB_ENV

    - name: Run Unit Tests
      env:
        TEST_ENV: ${{ env.TEST_ENV }}
      run: |
        echo "TEST_ENV=$TEST_ENV"
        node ./scripts/mock-test.js unit


  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Run Integration Tests
      env:
        TEST_ENV: ${{ env.TEST_ENV }}
      run: |
        echo "TEST_ENV=$TEST_ENV"
        node ./scripts/mock-test.js integration


  deploy-staging:
    runs-on: ubuntu-latest
    needs: test-integration
    environment:
    name: Staging
    url: ${{ steps.release.outputs.html_url }}
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: dist          # ⬅️ 下載到 dist/

    - name: Release to Staging
      id: release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "ENV VARS (if any): DEPLOY_ENV=${{ vars.DEPLOY_ENV }}"
        ls -R dist          # ⬅️ 檢查目錄裡有檔案
        TAG="staging-$(date +%Y%m%d-%H%M%S)"
        gh release create "${TAG}" dist/** --notes "Staging release after unit+integration passed"
        URL=$(gh release view "${TAG}" --json url -q .url)
        echo "html_url=${URL}" >> $GITHUB_OUTPUT

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
    name: Production
    url: ${{ steps.release.outputs.html_url }}
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: dist          # ⬅️ 同樣解到 dist/

    - name: Release to Production
      id: release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TEST_ENV: prod
      run: |
        echo "TEST_ENV=$TEST_ENV"
        echo "ENV VARS (if any): DEPLOY_ENV=${{ vars.DEPLOY_ENV }}"
        ls -R dist
        TAG="prod-$(date +%Y%m%d-%H%M%S)"
        gh release create "${TAG}" dist/** --notes "Production release (requires environment approval)"
        URL=$(gh release view "${TAG}" --json url -q .url)
        echo "html_url=${URL}" >> $GITHUB_OUTPUT

