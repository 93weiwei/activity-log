name: Build → Unit → Integration → Staging → Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_fail:
        description: "Force tests to fail (for demo/screenshots)"
        required: false
        default: "false"

permissions:
  contents: write
  id-token: write
  deployments: write

env:
  ARTIFACT_NAME: build-artifact
  NODE_VERSION: '20'
  TEST_ENV: staging

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 👉 新增：安裝 Bun（供 "bun i" 使用）
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 'latest'   # 或固定版本，例如 '1.1.29'

      - name: Install & Build
        shell: bash
        run: |
          set -e
          npm install
          # 你的 package.json 裡 build 會跑：bun i && ncc build ...
          npm run build || {
            echo "Build failed, fallback to mock dist"
            mkdir -p dist && echo '<h1>Hello CI</h1>' > dist/index.html
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/**


  test-unit:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Optional fail (for screenshots)
        if: ${{ github.event.inputs.force_fail == 'true' }}
        run: echo "FORCE_FAIL=1" >> $GITHUB_ENV
      - name: Run Unit Tests
        env:
          TEST_ENV: ${{ env.TEST_ENV }}
        run: |
          echo "TEST_ENV=$TEST_ENV"
          npm run test:unit

  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Run Integration Tests
        env:
          TEST_ENV: ${{ env.TEST_ENV }}
        run: |
          echo "TEST_ENV=$TEST_ENV"
          npm run test:integration

  deploy-staging:
    runs-on: ubuntu-latest
    needs: test-integration
    environment:
      name: Staging
      url: ${{ steps.release.outputs.html_url }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Install gh
        uses: cli/gh-action@v2
      - name: Release to Staging
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "ENV VARS (if any): DEPLOY_ENV=${{ vars.DEPLOY_ENV }}"
          TAG="staging-$(date +%Y%m%d-%H%M%S)"
          gh release create "${TAG}" dist/** --notes "Staging release after unit+integration passed"
          URL=$(gh release view "${TAG}" --json url -q .url)
          echo "html_url=${URL}" >> $GITHUB_OUTPUT

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: Production
      url: ${{ steps.release.outputs.html_url }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Install gh
        uses: cli/gh-action@v2
      - name: Release to Production
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_ENV: prod
        run: |
          echo "TEST_ENV=$TEST_ENV"
          echo "ENV VARS (if any): DEPLOY_ENV=${{ vars.DEPLOY_ENV }}"
          TAG="prod-$(date +%Y%m%d-%H%M%S)"
          gh release create "${TAG}" dist/** --notes "Production release (requires environment approval)"
          URL=$(gh release view "${TAG}" --json url -q .url)
          echo "html_url=${URL}" >> $GITHUB_OUTPUT
